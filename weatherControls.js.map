{"version":3,"file":"weatherControls.js","sourceRoot":"","sources":["weatherControls.ts"],"names":[],"mappings":"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","sourcesContent":["import CTabSettings from \"./settingsMenu\";\nimport {WeatherWidget} from \"./cTabWidgetType\";\n\nconst defaultWeatherTimeout = 1000 * 60 * 15;\n\ninterface OpenWeatherMapData {\n    weather: OpenWeatherMapWeather[];\n    main: {\n        temp: number;\n        pressure: number;\n        humidity: number;\n        temp_min: number;\n        temp_max: number;\n    };\n    base: string;\n    name: string;\n}\n\ninterface weatherDataSave extends OpenWeatherMapData {\n    retrievedAt: number;\n}\n\ninterface OpenWeatherMapWeather {\n    id: number;\n    main: string;\n    description: string;\n}\n\n// Retrieves the past information on weather from the local storage\nlet knownWeather: { [city: string]: weatherDataSave; } = JSON.parse(window.localStorage.getItem('weatherInfo') || '{}');\n\n// Dictionary of weather type to emoji\nlet weatherEmoji: { [weatherType: string]: string; } = {\n    \"Mist\": \"🌁\",\n    \"Haze\": \"🌫️\",\n    \"Snow\": \"⛄\",\n    \"Rain\": \"☔\",\n    \"Clouds\": \"⛅\",\n    \"Thunderstorm\": \"⚡\",\n    \"Clear\": \"🌞\",\n    \"Moon\": \"🌜\",\n    \"Windy\": \"⛵\",\n    \"Drizzle\": \"🌦\",\n    \"Error\": \"❌\",\n    \"Fog\": \"🌫️\"\n};\n\nlet tempFormat = (data: OpenWeatherMapData): string => {\n    if (data.weather) {\n        console.log(\"Weather type(s)\", data.weather.reduce((acc, curr) => acc + \" - \" + curr.main, \"\"));\n        let curTemp = (data.main.temp - 273.15).toFixed(2);\n        let curWeather = data.weather.reduce((acc, weatherType: OpenWeatherMapWeather) => {\n            if (weatherEmoji.hasOwnProperty(weatherType.main)) {\n                return acc + weatherEmoji[weatherType.main];\n            }\n            return acc + weatherEmoji.Error;\n        }, \"\");\n        return `${curWeather} ${curTemp}°C`;\n    }\n    return \"invalid key\";\n};\n\nexport const getWeather = (id: number, city: string) => {\n\n    let weatherOutputElem: HTMLElement | null = document.getElementById(id + '-output');\n    let weatherTimeout = CTabSettings.getWeatherTimeoutValue() || defaultWeatherTimeout;\n    if (knownWeather && knownWeather.hasOwnProperty(city) && (new Date().getTime() - knownWeather[city].retrievedAt) < weatherTimeout) {\n\n        if (weatherOutputElem !== null) {\n            weatherOutputElem.innerText = tempFormat(knownWeather[city]);\n        }\n    } else {\n        city = city === \"\" ? \"delft\" : city;\n        const apiKey = CTabSettings.getWeatherAPIKey();\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`).then(response =>\n            response.json().then(data => ({\n                    data: data,\n                    status: response.status\n                })\n            ).then(res => {\n                knownWeather[city] = res.data;\n                knownWeather[city].retrievedAt = new Date().getTime();\n                window.localStorage.setItem('weatherInfo', JSON.stringify(knownWeather));\n                if (weatherOutputElem !== null) {\n                    weatherOutputElem.innerText = tempFormat(res.data);\n                }\n            })).catch((err) => {\n            console.log(err);\n            if (weatherOutputElem!== null) {\n                weatherOutputElem.innerText = weatherEmoji.Error + \"no (valid) key\";\n            }\n        });\n    }\n};\n\n\n// Export this function\nexport function addWeatherListener(widget: WeatherWidget, id: number): void {\n    const cityButton = document.getElementById(id + '-cityInputButton');\n    if (cityButton) {\n        cityButton.addEventListener('click', () => {\n            const cityNameInput: HTMLElement | null = document.getElementById(id + '-cityInput');\n            if (cityNameInput !== null) {\n                let city = (<HTMLInputElement>cityNameInput).value;\n                widget.settings.city = city;\n                getWeather(id, city);\n            }\n        });\n    } else {\n        console.log(\"Could not find the 'change' button corresponding to widget\", id);\n    }\n}\n"]}