{"version":3,"file":"settingsMenu.js","sourceRoot":"","sources":["settingsMenu.ts"],"names":[],"mappings":"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","sourcesContent":["import Picker from 'vanilla-picker';\n\ninterface CTabSettingsMenu {\n    initialize: () => void;\n    getWeatherTimeoutValue: () => number;\n    getTimezone: () => string;\n    getWeatherAPIKey: () => string;\n    getShowUnsavedWarning: () => boolean;\n    getNewTab: () => boolean;\n}\n\nlet CTabSettings = (): CTabSettingsMenu => {\n    const settingsToggleButton: HTMLButtonElement | null = document.querySelector('#settings-toggle');\n    const settingsPaneDiv: HTMLDivElement | null = document.querySelector('#settingsMenu');\n    const backgroundImg: HTMLImageElement | null = document.querySelector('#background');\n    const bgUrlVal: HTMLInputElement | null = document.querySelector('#background-url-value');\n\n    const weatherTimeoutInput: HTMLInputElement | null = document.querySelector('#weather-timeout');\n\n    let settingsActive: boolean = false;\n    const backgroundApplyButton: HTMLButtonElement | null = document.querySelector('#background-apply');\n    const settingsMainSaveButton: HTMLButtonElement | null = document.querySelector('#settings-main-save-button');\n    const unsavedChangesWarningCheckbox: HTMLInputElement | null = document.querySelector('#unsaved-changes-warning');\n    const openInNewTabCheckbox: HTMLInputElement | null = document.querySelector('#link-new-tab');\n    const weatherAPIKeyInput: HTMLInputElement | null = document.querySelector('#weather-API-key');\n    const timezoneSelect: HTMLSelectElement | null = document.querySelector('#timezone-select');\n\n    let currentSettings = JSON.parse((<any>window).localStorage.getItem('CTab-settings')) || {};\n\n\n    const initialize = function (): void {\n        // Color pickers\n        new Picker({\n            parent: document.getElementById('widget-border-color')!,\n            popup: 'bottom', // 'right'(default), 'left', 'top', 'bottom'\n            editor: true,\n            color: currentSettings.borderColor,\n            onChange: (newColor) => {\n                (<any>document).documentElement.style.setProperty('--widget-border-color', newColor.rgbaString);\n                currentSettings.borderColor = newColor.rgbaString;\n            },\n            onDone: (newColor) => {\n                currentSettings.borderColor = newColor.rgbaString;\n                save();\n            }\n        });\n\n        new Picker({\n            parent: document.getElementById('background-color-picker')!,\n            popup: 'bottom', // 'right'(default), 'left', 'top', 'bottom'\n            editor: true,\n            color: currentSettings.backgroundColor,\n            onChange: (newColor) => {\n                (<any>document).documentElement.style.setProperty('--background-color', newColor.rgbaString);\n                currentSettings.backgroundColor = newColor.rgbaString;\n            },\n            onDone: (newColor) => {\n                currentSettings.backgroundColor = newColor.rgbaString;\n                save();\n            }\n        });\n\n        (<any>document).documentElement.style.setProperty('--widget-border-color', currentSettings.borderColor);\n\n        backgroundImg!.src = currentSettings.background;\n        if (typeof currentSettings.backgroundRadioSelected === 'number') {\n            (<HTMLInputElement>document.getElementsByName('background')[currentSettings.backgroundRadioSelected]).checked = true;\n            if (currentSettings.backgroundRadioSelected === 2) {\n                bgUrlVal!.value = currentSettings.background;\n            }\n        }\n\n        unsavedChangesWarningCheckbox!.checked = currentSettings.unsavedChangesWarningEnabled || false;\n        unsavedChangesWarningCheckbox!.addEventListener('click', () => {\n            currentSettings.unsavedChangesWarningEnabled = unsavedChangesWarningCheckbox!.checked;\n            save();\n        });\n\n        openInNewTabCheckbox!.checked = currentSettings.openInNewTab || false;\n        openInNewTabCheckbox!.addEventListener('click', () => {\n            currentSettings.openInNewTab = openInNewTabCheckbox!.checked;\n            save();\n        });\n\n        weatherAPIKeyInput!.value = currentSettings.weatherAPIKey || \"\";\n        weatherAPIKeyInput!.addEventListener('change', () => {\n            currentSettings.weatherAPIKey = weatherAPIKeyInput!.value;\n            save();\n        });\n\n\n        // weather timeout\n        weatherTimeoutInput!.value = currentSettings.weatherTimeout || 60 * 15;\n        weatherTimeoutInput!.addEventListener('change', () => {\n            currentSettings.weatherTimeout = weatherTimeoutInput!.value;\n            save();\n        });\n\n        // Timezone\n        timezoneSelect!.selectedIndex = currentSettings.timezoneIndex || 421; //default to Europe/Amsterdam\n        timezoneSelect!.addEventListener('change', () => {\n            currentSettings.timezone = timezoneSelect!.options[timezoneSelect!.selectedIndex].innerText;\n            currentSettings.timezoneIndex = timezoneSelect!.selectedIndex;\n            save();\n        });\n    };\n\n    function getBackgroundSetting(): void {\n        let selectedBackgroundOption: string = \"\";\n        let backgroundOptions: NodeListOf<HTMLElement> | null = document.getElementsByName('background');\n        for (let i = 0, length = backgroundOptions!.length; i < length; i++) {\n            if ((<HTMLInputElement>backgroundOptions![i]).checked) {\n                selectedBackgroundOption = (<HTMLInputElement>backgroundOptions![i]).value;\n                currentSettings.backgroundRadioSelected = i;\n                break;\n            }\n        }\n\n        switch (selectedBackgroundOption) {\n            case 'file':\n                const convertToBase64 = function (file: File, callback: (result: string | ArrayBuffer | null, error: DOMException | null) => any) {\n                    let reader = new FileReader();\n                    reader.onloadend = function () {\n                        callback(reader.result, reader.error);\n                    };\n                    reader.readAsDataURL(file);\n                };\n\n                const backgroundFileInput: HTMLInputElement | null = document.querySelector(\"#background-file-value\");\n                let selectedFile = backgroundFileInput!.files![0];\n                // check if a file is selected\n                if (selectedFile) {\n                    convertToBase64(selectedFile, function (base64) {\n                        currentSettings.background = base64;\n                        backgroundImg!.src = currentSettings.background;\n                    });\n                }\n                break;\n            case 'url':\n                let backgroundUrlValue = bgUrlVal!.value;\n                currentSettings.background = backgroundUrlValue;\n                break;\n            case 'color':\n                currentSettings.background = \"\";\n                break;\n            case 'random':\n            default:\n                currentSettings.background = \"https://source.unsplash.com/random/1920x1080\";\n                break;\n        }\n        backgroundImg!.src = currentSettings.background;\n        save();\n    }\n\n    function save(): void {\n        window.localStorage.setItem('CTab-settings', JSON.stringify(currentSettings));\n    }\n\n\n    settingsMainSaveButton!.addEventListener('click', () => {\n        save();\n    });\n    backgroundApplyButton!.addEventListener('click', () => {\n        getBackgroundSetting();\n        // reload to let gridcontrols use new settings;\n    });\n\n    settingsToggleButton!.addEventListener('click', () => settingsToggle());\n\n\n    function settingsToggle(): void {\n        settingsActive = !settingsActive;\n        settingsActive ? settingsPaneDiv!.classList.remove('hidden') : settingsPaneDiv!.classList.add('hidden');\n    }\n\n    const getWeatherTimeoutValue = function (): number {\n        return currentSettings.weatherTimeout * 1000;\n    };\n\n    const getTimezone = function () {\n        return currentSettings.timezone;\n    };\n\n    const getWeatherAPIKey = function () {\n        return currentSettings.weatherAPIKey;\n    };\n\n    const getShowUnsavedWarning = function () {\n        return currentSettings.unsavedChangesWarningEnabled;\n    };\n\n    const getNewTab = function () {\n        return currentSettings.openInNewTab;\n    };\n\n    return {\n        initialize: initialize,\n        getWeatherTimeoutValue: getWeatherTimeoutValue,\n        getTimezone: getTimezone,\n        getWeatherAPIKey: getWeatherAPIKey,\n        getShowUnsavedWarning: getShowUnsavedWarning,\n        getNewTab: getNewTab\n    };\n};\n\nexport default CTabSettings();\n"]}